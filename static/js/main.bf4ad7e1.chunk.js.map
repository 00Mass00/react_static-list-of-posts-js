{"version":3,"sources":["components/CommentInfo/CommentInfo.jsx","components/CommentList/CommentList.jsx","components/UserInfo/UserInfo.jsx","components/PostInfo/PostInfo.jsx","components/PostList/PostList.jsx","App.jsx","index.jsx"],"names":["CommentInfo","comment","name","email","body","className","href","CommentList","comments","map","id","UserInfo","user","PostInfo","post","title","length","PostList","posts","preparedPosts","postsFromServer","userId","usersFromServer","find","postId","commentsFromServer","filter","App","ReactDOM","render","document","getElementById"],"mappings":"u28IAAaA,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAE1BC,EAGED,EAHFC,KACAC,EAEEF,EAFFE,MACAC,EACEH,EADFG,KAGF,OACE,sBAAKC,UAAU,cAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,wBAAQA,UAAU,oBAAlB,SAAuCH,IAEtC,OAED,mBACEG,UAAU,qBACVC,KAAI,iBAAYH,GAFlB,SAIGA,OAIL,qBAAKE,UAAU,oBAAf,SACGD,Q,SCnBIG,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzB,qBAAKH,UAAU,cAAf,SACGG,EAASC,KAAI,gBAAGC,EAAH,EAAGA,GAAOT,EAAV,wBACZ,cAAC,EAAD,CAEEA,QAASA,GADJS,SCNAC,G,MAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjBV,EAAgBU,EAAhBV,KAAMC,EAAUS,EAAVT,MAEd,OACE,mBAAGE,UAAU,WAAWC,KAAI,iBAAYH,GAAxC,SACGD,MCDMW,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjBC,EAAgCD,EAAhCC,MAAOX,EAAyBU,EAAzBV,KAAMQ,EAAmBE,EAAnBF,KAAMJ,EAAaM,EAAbN,SAE3B,OACE,sBAAKH,UAAU,WAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiCU,IACjC,8BACG,aAED,cAAC,EAAD,CACEH,KAAMA,UAKZ,mBAAGP,UAAU,iBAAb,SAA+BD,IAC9BI,EAASQ,OAAS,EACjB,cAAC,EAAD,CAAaR,SAAUA,IAEvB,mBAAG,UAAQ,oBAAX,iC,SCvBKS,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,qBAAKb,UAAU,WAAf,SACGa,EAAMT,KAAI,gBAAGC,EAAH,EAAGA,GAAOI,EAAV,wBACT,cAAC,EAAD,CAEEA,KAAMA,GADDJ,SCWb,IAAMS,EAAgBC,EAAgBX,KAAI,SAAAK,GAAI,kCACzCA,GADyC,IAE5CF,MAdwBF,EAcDI,EAAKO,OAbrBC,EAAgBC,MAAK,SAAAX,GAAI,OAC9BF,IAAOE,EAAKF,OACR,MAYNF,UAT2BgB,EASGV,EAAKJ,GAR5Be,EAAmBC,QAAO,SAAAzB,GAAO,OACtCA,EAAQuB,SAAWA,QAFvB,IAA6BA,EANHd,KAkBbiB,EAAM,kBACjB,0BAAStB,UAAU,MAAnB,UACE,oBAAIA,UAAU,aAAd,kCACA,cAAC,EAAD,CAAUa,MAAOC,QCvBrBS,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bf4ad7e1.chunk.js","sourcesContent":["export const CommentInfo = ({ comment }) => {\n  const {\n    name,\n    email,\n    body,\n  } = comment;\n\n  return (\n    <div className=\"CommentInfo\">\n      <div className=\"CommentInfo__title\">\n        <strong className=\"CommentInfo__name\">{name}</strong>\n\n        {' by '}\n\n        <a\n          className=\"CommentInfo__email\"\n          href={`mailto:${email}`}\n        >\n          {email}\n        </a>\n      </div>\n\n      <div className=\"CommentInfo__body\">\n        {body}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CommentList.scss';\nimport { CommentInfo } from '../CommentInfo';\n\nexport const CommentList = ({ comments }) => (\n  <div className=\"CommentList\">\n    {comments.map(({ id, ...comment }) => (\n      <CommentInfo\n        key={id}\n        comment={comment}\n      />\n    ))}\n  </div>\n);\n","import './UserInfo.scss';\n\nexport const UserInfo = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport './PostInfo.scss';\n\nimport { CommentList } from '../CommentList';\nimport { UserInfo } from '../UserInfo';\n\nexport const PostInfo = ({ post }) => {\n  const { title, body, user, comments } = post;\n\n  return (\n    <div className=\"PostInfo\">\n      <div className=\"PostInfo__header\">\n        <h3 className=\"PostInfo__title\">{title}</h3>\n        <p>\n          {'Posted by '}\n\n          <UserInfo\n            user={user}\n          />\n        </p>\n      </div>\n\n      <p className=\"PostInfo__body\">{body}</p>\n      {comments.length > 0 ? (\n        <CommentList comments={comments} />\n      ) : (\n        <b data-cy=\"NoCommentsMessage\">No comments yet</b>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { PostInfo } from '../PostInfo';\n\nexport const PostList = ({ posts }) => (\n  <div className=\"PostList\">\n    {posts.map(({ id, ...post }) => (\n      <PostInfo\n        key={id}\n        post={post}\n      />\n    ))}\n  </div>\n);\n","import './App.scss';\nimport postsFromServer from './api/posts.json';\nimport commentsFromServer from './api/comments.json';\nimport usersFromServer from './api/users.json';\nimport { PostList } from './components/PostList';\n\nfunction findInformerById(id) {\n  return usersFromServer.find(user => (\n    id === user.id\n  )) || null;\n}\n\nfunction getCommentsByPostId(postId) {\n  return commentsFromServer.filter(comment => (\n    comment.postId === postId\n  ));\n}\n\nconst preparedPosts = postsFromServer.map(post => ({\n  ...post,\n  user: findInformerById(post.userId),\n  comments: getCommentsByPostId(post.id),\n}));\n\nexport const App = () => (\n  <section className=\"App\">\n    <h1 className=\"App__title\">Static list of posts</h1>\n    <PostList posts={preparedPosts} />\n  </section>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}